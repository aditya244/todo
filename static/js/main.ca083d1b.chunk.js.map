{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","todos","todo","onClickHandler","todosCopy","_this","slice","push","setState","onChangeHandler","e","target","value","onRemoveHandler","i","todosAfterRemove","splice","_this2","this","todoList","map","li","react_default","a","createElement","key","type","onClick","className","placeholder","onChange","name","length","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"yNAqDeA,oNAjDbC,MAAQ,CACNC,MAAQ,GACRC,KAAO,MAGTC,eAAiB,WACf,IAAIC,EAAYC,EAAKL,MAAMC,MAAMK,QACjCF,EAAUG,KAAKF,EAAKL,MAAME,MAC1BG,EAAKG,SAAS,CACZP,MAAOG,EACPF,KAAK,QAKTO,gBAAkB,SAACC,GAGjBL,EAAKG,SAAS,CACZN,KAAMQ,EAAEC,OAAOC,WAKnBC,gBAAkB,SAACC,GACjB,IAAIC,EAAmBV,EAAKL,MAAMC,MAAMK,QACxCS,EAAiBC,OAAOF,EAAG,GAC3BT,EAAKG,SAAS,CACZP,MAAOc,6EAGF,IAAAE,EAAAC,KACHC,EAAWD,KAAKlB,MAAMC,MAAMmB,IAAI,SAACC,EAAIP,GACrC,OAAOQ,EAAAC,EAAAC,cAAA,MAAIC,IAAKX,GAAIO,EAAGC,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASC,QAASV,EAAKJ,iBAApC,aAE3B,OACES,EAAAC,EAAAC,cAAA,OAAKI,UAAU,OACbN,EAAAC,EAAAC,cAAA,UAAQI,UAAU,cAChBN,EAAAC,EAAAC,cAAA,qBAEFF,EAAAC,EAAAC,cAAA,SAAOE,KAAK,OAAOG,YAAY,OAAOjB,MAAOM,KAAKlB,MAAME,KAAM4B,SAAUZ,KAAKT,kBAC7Ea,EAAAC,EAAAC,cAAA,WACAF,EAAAC,EAAAC,cAAA,UAAQE,KAAK,SAASK,KAAK,SAASJ,QAAST,KAAKf,gBAAlD,QAC6B,IAA5Be,KAAKlB,MAAMC,MAAM+B,OAAeV,EAAAC,EAAAC,cAAA,sBAAoBF,EAAAC,EAAAC,cAAA,UAAKL,EAAL,aA5C3Cc,cCSEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOlB,EAAAC,EAAAC,cAACiB,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.ca083d1b.chunk.js","sourcesContent":["import React, {  Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    todos : [],\n    todo : '',\n  }\n\n  onClickHandler = () => {\n    let todosCopy = this.state.todos.slice();\n    todosCopy.push(this.state.todo);\n    this.setState({\n      todos: todosCopy,\n      todo:'',\n    })\n    //console.log(this.state.todos)\n  }\n\n  onChangeHandler = (e) => {\n    //e.preventDefault();\n    //const userTodo = e.target.value\n    this.setState({\n      todo: e.target.value,\n    });\n    //console.log(this.state.todo)\n  }\n\n  onRemoveHandler = (i) => {\n    let todosAfterRemove = this.state.todos.slice();\n    todosAfterRemove.splice(i, 1) \n    this.setState({\n      todos: todosAfterRemove,\n    })\n  } \n  render() {\n    let todoList = this.state.todos.map((li, i) => {\n        return <li key={i}>{li}<button type=\"button\" onClick={this.onRemoveHandler}>Remove</button></li>\n    })\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1> Todo </h1>\n        </header>\n        <input type=\"text\" placeholder=\"Todo\" value={this.state.todo} onChange={this.onChangeHandler}/>\n        <br/>\n        <button type=\"button\" name=\"button\" onClick={this.onClickHandler}>Add </button> \n        {this.state.todos.length === 0 ? <p>Not Added</p> :  <ul>{todoList} </ul>}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}